1:artisan命令行命令：
    1：清除权限缓存
        php artisan permission:cache-reset
        app()->make(\Zhulei\Permission\PermissionRegistrar::class)->forgetCachedPermissions();
    2：创建权限
        php artisan permission:create-permission name guard?
    3：创建角色
        php artisan permission:create-role name guard? permissions|permissions?
    4:命令行显示守卫下面管理员有哪些权限
        ['', '管理员', '报表管理员'];
        ['add', '✔', '.'];
        显示样式(default|borderless|compact|box)
        php artisan permission:show guard? style?


2:Contracts契约接口
    1:Permission权限接口
        1：roles 权限所属角色 BelongsToMany
        2：findByName  通过权限名,guard_name查找权限(name, guardName)
        3：findById  通过权限Id,guard_name查找权限 (id, guardName)
        4：findOrCreate 通过权限名查找或新建权限  (name, guardName)

    2:Role角色接口
        1:permissions 角色所拥有的权限 BelongsToMany
        2：findByName  通过角色名,guard_name查找权限(name, guardName)
        3：findById  通过角色Id,guard_name查找权限 (id, guardName)
        4：findOrCreate 通过角色名查找或新建角色  (name, guardName)
        5：hasPermissionTo 判断给定的角色是否有权限执行 (string/\Zhulei\Permission\Contracts\Permission permission)

3:异常类 src/Exceptions/
    1：守卫不匹配 GuardDoesNotMath
        create方法  用守卫名添加角色或者权限在系统守卫集合中不存在
    2：权限已经存在 PermissionAlreadyExists
        create方法  添加的权限名在某个守卫下已经存在了
    3：权限不存在 PermissionDoesNotExist
        create方法 添加的权限名在守卫下不存在
        withId  这个ID在权限中不存在
    4：角色已经存在  RoleAlreadyExists
        create  角色名在守卫下已经存在
    5：角色不存在  RoleDoesNotExist
        named 没有这个角色名
        withId 角色ID不存在
    6:未认证 UnauthorizedException
        forRoles  提示用户角色不对 参数为正确的角色数组
        forPermissions  提示用户权限不对  参数是正确的权限数组
        forRolesOrPermissions 提示用户没有角色或者权限的权限  参数为正确的角色或权限数组
        notLoggedIn  提示用户未登陆
        getRequiredRoles 返回正确的角色数组
        getRequiredPermissions 返回正确的权限数组
    如果你想覆盖默认403异常可以：
    public function render($request, Exception $exception)
    {
        if ($exception instanceof \Zhulei\Permission\Exceptions\UnauthorizedException) {
            // Code here ...
        }
        return parent::render($request, $exception);
    }

4：中间件 如果想使用中间件需要到app/Http/Kernel.php  $routeMiddleware中添加中间件名指向下面的类
    可以在控制器中使用，路由中使用中间件 ->middleware('permission') ->middleware(CheckAge::class); ->middleware('permission:add|edit');
     kernel中的$middlewareGroups是中间件组。
     中间件参数需要在request, $next,后传递参数。
     在中间件响应发送给浏览器之后调用可以在中间件中定义 terminate($request, $response)方法


    1：权限中间件   PermissionMiddleware
    2:角色中间件   RoleMiddleware
    3:角色或权限中间件 RoleOrPermissionMiddleware

    想使用中间件必须在app/http/kernel.php中添加如下：
    protected $routeMiddleware = [
        // ...
        'role' => \Zhulei\Permission\Middlewares\RoleMiddleware::class,
        'permission' => \Zhulei\Permission\Middlewares\PermissionMiddleware::class,
        'role_or_permission' => \Zhulei\Permission\Middlewares\RoleOrPermissionMiddleware::class,
    ];
    控制器中使用路由：
    public function __construct()
    {
        $this->middleware(['role_or_permission:super-admin|edit']);
    }
    public function __construct()
    {
        $this->middleware(['role:super-admin','permission:publish|edit']);
    }

    路由中使用：
    Route::group(['middleware' => ['role:super-admin']], function () {
        //
    });

    Route::group(['middleware' => ['permission:publish']], function () {
        //
    });

    Route::group(['middleware' => ['role:super-admin','permission:publish']], function () {
        //
    });

    Route::group(['middleware' => ['role_or_permission:super-admin']], function () {
        //
    });

    Route::group(['middleware' => ['role_or_permission:publish']], function () {
        //
    });


5：模型类

    1：权限模型 Permission
        1：roles 权限属于哪些角色 BelongsToMany
            有一个roles和permission，和role_has_permissions表，是多对多的关系，在permission模型中有roles方法，哪些角色拥有此权限。
            return $this->belongsToMany(
                'Zhulei\Permission\Models\Role::class/Zhulei\Permission\Models\Role',//当前模型想获取的模型字符串或字符串类名
                'role_has_permissions'//关联连接表名，如果不设置默认是用按两个表字符顺序连接的两个表permission_users
                'permission_id',//当前模型在连接表中的外键
                'role_id'//另一个模型（第一个参数）在连接表里的外键
            );
            多对多关系：
                一个角色拥有多个权限，一个权限属于多个角色，是多对多关系，两个模型中都使用belongsToMany()方法来定义。
                有三个表。roles,permissions,role_has_permissions(此表中有permission_id,role_id)
                关联和被关联表都使用
                return $this->belongsToMany('想获取的模型'，'关联表', '当前模型在关联表中的外键','另一个表在关联表中的外键');
                定义好之后就可以使用$user->roles动态属性获取到所有的角色数组。
                定义好之后也可以使用链式的进行过滤查询$user->roles()->orderBy('id')->get();
                获取关联连接表字段：
                    pivot代表中间表模型，可以像Eloquent模型一样使用
                    foreach($user->roles as $role){
                        $role->pivot->create_at;
                    }
                    模型情况下中间表只有两个字段，如果有其他字段，需要在定义关联声明时明确指出，
                    return $this->belongsToMany('App\Role')->withPivot('column1', 'column2');
                    如果想让中间表自动维护created_at,updated_at:
                    return $this->belongsToMany('App\Role')->withTimestamps();
        2:__construct
            权限模型初始化，可以传入属性数组，
            如果传入就用传入的守卫名，如果没传入用配置文件里的守卫名，给当前模型设置守卫名，然后设置当前模型表名。

            protected $guarded 不允许自动填充的字段
            protected $fillable 允许自动填充（白名单）

            Post::create($request->all())//自动批量赋值并过滤
            我们也可以使用如下形式：
                $post = new Post($data);
                $post->user_id = Auth::id();
                $post->save();
                或者使用fill()方法，它也会使用过滤。

            self::出现在哪就解析成相应的类。
            $this指向当前实例化的对象。
            self::和parent::出现在哪个类中就解析为相应的类，除非子类覆盖父类中的方法。
            静态属性不能通过已实例化的对象来访问，但静态方法可以。
            由于静态方法不需要通过对象就可以访问，所以伪变量$this在静态方法中不可用。
            静态方法不能通过->访问,只能通过::访问。
            可以通过变量引用类静态方法：
                $classname = 'Foo';
                $classname::aStaticMethod();

            self::, __CLASS__对当前类的静态引用，取决于该方法定义在哪个类中。
            static::表示最终哪个类调用的就是哪个类。
            在非静态环境下，也就是有个A类有个私有方法被类中公有方法调用，然后该类被实例化，当中的公有方法中的static::foo()foo是私有方法，在非静态环境下，所调用的类即为该对象实例所属的类。由于 $this-> 会在同一作用范围内尝试调用私有方法，而 static:: 则可能给出不同结果。另一个区别是 static:: 只能用于静态属性。
            后期静态绑定的解析会一直到取得一个完全解析了的静态调用为止。另一方面，如果静态调用使用 parent:: 或者 self:: 将转发调用信息。

        3：create 静态方法
            创建权限     array $attributes      (name, guard_name等)
            PermissionContract::create();

        4：users    MorphToMany
            取出这个权限的所有用户，多对多多态关联
            permissions,roles,manage(取得表),model_has_permission(关联表)

            PermissionContract::users();

        5：findByName  (string $name, $guardName)  static   PermissionContract
            用权限名查找权限
            PermissionContract::findByName()
        6: findById (int $id, $guardName = null) static
            用ID查找权限
            PermissionContract::findById()
        7: 查找没有的话添加 findOrCreate(string $name, $guardName = null): PermissionContract

        8：traits
            1:RefreshesPermissionCache
                bootRefreshesPermissionCache 用不到，是兼容5.5的
            2：HasRoles

   方法使用：
        1：通过用户添加权限：
        $user->givePermissionTo('edit articles');
            参数为：
            权限 string|
            权限 array|
            权限 \Spatie\Permission\Contracts\Permission|
            权限 \Illuminate\Support\Collection
                多对多关联操作：
                    通过用户移除中间表所有的角色$user->roles()->detach(); $user->roles()->detach($roleId);
                    通过用户附加中间表角色  $user->roles()->attach($roleId);  $user->roles()->detach([1, 2, 3]);
                    通过用户同步中间表角色没有的添加，有的删除：$user->roles()->sync([1, 2, 3]);
         2:常用操作：
            通过用户添加角色：
                $user->assignRole('writer');  参数可以是字符串，角色数组，角色集合\Spatie\Permission\Contracts\Role
            通过角色添加权限：
                $role->givePermissionTo('edit articles'); 参数可以为 字符串，数组，权限接口，集合
            通过角色添加权限：
            $role->givePermissionTo($permission);或者$role->syncPermissions($permissions);
            通过权限把权限赋值给角色：
            $permission->assignRole($role); 或者 $permission->syncRoles($roles);

            通过角色删除权限：
            $role->revokePermissionTo($permission);参数为 \Spatie\Permission\Contracts\Permission，\Spatie\Permission\Contracts\Permission[]， string, []
            通过权限删除某个角色里的权限：
            $permission->removeRole($role);

            通过用户获取用户下面所有的权限名字集合：
                $permissionNames = $user->getPermissionNames();
            通过用户获取用户下面所有的权限集合：
                $permissions = $user->permissions;
            获取该模型的权限集合：
                $permissions = $user->getDirectPermissions();
            返回权限通过该用户的角色：
                $permissions = $user->getPermissionsViaRoles();
            通过用户获取用户角色名称集合：
                $roles = $user->getRoleNames();
            返回具有该角色的用户集合：
                $users = User::role('writer')->get();
            通过用户返回具有某个权限的所有用户集合：
                $users = User::permission('edit')->get();
            通过用户赋予用户某些权限：
            $user->givePermissionTo('edit articles', 'delete articles');
            // You may also pass an array
            $user->givePermissionTo(['edit articles', 'delete articles']);
            $user->givePermissionTo('edit');//参数可以为字符串，数组，\Zhulei\Permission\Contracts\Permission接口，\Illuminate\Support\Collection集合

            通过用户删除用户下角色：
                $user->revokePermissionTo('edit articles');参数可以为字符串，数组，\Spatie\Permission\Contracts\Permission权限，\Spatie\Permission\Contracts\Permission[]集合
            通过用户删除不存在的添加新的，常用户编辑用户权限的时候：
            $user->syncPermissions(['edit articles', 'delete articles']);//参数可以是string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection

            通过用户确认用户是否有某个权限：
                $user->hasPermissionTo('1');
                $user->hasPermissionTo(Permission::find(1)->id);
                $user->hasPermissionTo($somePermission->id);
                $user->hasPermissionTo('edit'); //参数可以是string|int|\Spatie\Permission\Contracts\Permission
            通过用户确认用户是否有当中的某个权限：
                $user->hasAnyPermission(['edit articles', 1, 5]);参数也可以是数字和字符
                $user->hasAnyPermission(['edit articles', 'publish articles', 'unpublish articles']);//参数是字符串数组，或者ID数组
            通过用户判断是否有这这里面的所有权限：
                $user->hasAllPermissions(['edit articles', 'publish articles', 'unpublish articles']);//参数是字符串数组，或者ID数组

            使用laravel默认自带的can函数的权限，因为权限已经保存在Illuminate\Auth\Access\Gate中了：
                $user->can('edit articles');

            通过用户把某些角色赋值给用户：
                常用于添加时：
               array|string|\Spatie\Permission\Contracts\Role ...$roles
               $user->assignRole('writer');
               $user->assignRole('writer', 'admin');
               // or as an array
               $user->assignRole(['writer', 'admin'])
            通过用户移除用户的某些角色：
                $user->removeRole('writer');
            通过用户移除用户所有角色然后添加角色，常用于编辑：
                $user->syncRoles(['writer', 'admin']);

            通过用户判断用户是否具有某个角色：
                $user->hasRole('writer');
            通过用户判断用户是否具有列表当中某个角色的权限：
                $user->hasAnyRole(Role::all());
            通过用户判断用户是否具有全部角色权限：
                $user->hasAllRoles(Role::all());
            通过角色把权限赋值给角色：
                $role->givePermissionTo('edit articles');
            通过角色判断角色时候有这个权限的权限：
                $role->hasPermissionTo('edit articles');
            通过角色移除角色的权限：
                \Spatie\Permission\Contracts\Permission
                \Spatie\Permission\Contracts\Permission[]
                string
                string[]

                $role->revokePermissionTo('edit articles');

            用户名字查找某个角色给角色赋予权限：
                $role = Role::findByName('writer');
                $role->givePermissionTo('edit articles');
            通过用户赋予用户角色和赋予用户权限：
                $user->assignRole('writer');
                $user->givePermissionTo('delete articles');
            通过用户直接获取用户所有权限：
                $user->getDirectPermissions() // Or $user->permissions;
            通过用户然后通过角色获取用户所有权限：
                $user->getPermissionsViaRoles();

            通过用户获取用户所有权限：
                $user->getAllPermissions();


        4：添加hasRole到用户模型：
            use Illuminate\Foundation\Auth\User as Authenticatable;
            use Zhulei\Permission\Traits\HasRoles;

            class User extends Authenticatable
            {
                use HasRoles;

                // ...
            }
        5:可以使用自带的模型创建角色和权限：
            use Zhulei\Permission\Models\Role;
            use Zhulei\Permission\Models\Permission;

            $role = Role::create(['name' => 'writer']);
            $permission = Permission::create(['name' => 'edit articles']);



        6：可以使用laravel自带的Gate 拦截检查
            $user->can('edit articles');

        7：使用准备
            添加服务提供者：
            config/app.php

            'providers' => [
                // ...
                Spatie\Permission\PermissionServiceProvider::class,
            ];

            生成数据表和配置文件：
                php artisan vendor:publish --provider="Zhulei\Permission\PermissionServiceProvider" --tag="migrations"
                php artisan migrate
                php artisan vendor:publish --provider="Zhulei\Permission\PermissionServiceProvider" --tag="config"
            添加中间件：
                protected $routeMiddleware = [
                    // ...
                    'role' => \Zhulei\Permission\Middlewares\RoleMiddleware::class,
                    'permission' => \Zhulei\Permission\Middlewares\PermissionMiddleware::class,
                    'role_or_permission' => \Zhulei\Permission\Middlewares\RoleOrPermissionMiddleware::class,
                ];


        8：模板使用：
            角色操作：
                @role('writer')
                    I am a writer!
                @else
                    I am not a writer...
                @endrole

                @hasrole('writer')
                    I am a writer!
                @else
                    I am not a writer...
                @endhasrole


                @hasanyrole($collectionOfRoles)
                    I have one or more of these roles!
                @else
                    I have none of these roles...
                @endhasanyrole
                // or
                @hasanyrole('writer|admin')
                    I am either a writer or an admin or both!
                @else
                    I have none of these roles...
                @endhasanyrole


                @hasallroles($collectionOfRoles)
                    I have all of these roles!
                @else
                    I do not have all of these roles...
                @endhasallroles
                // or
                @hasallroles('writer|admin')
                    I am both a writer and an admin!
                @else
                    I do not have all of these roles...
                @endhasallroles


                @unlessrole('does not have this role')
                    I do not have the role
                @else
                    I do have the role
                @endunlessrole



            权限操作：
                @can('edit articles')
                  //
                @endcan

                @if(auth()->user()->can('edit articles') && $some_other_condition)
                  //
                @endif



        9：超级管理员
            在AuthServiceProvider  boot方法中添加如下东西来检测是否管理员：
            use Illuminate\Support\Facades\Gate;

            class AuthServiceProvider extends ServiceProvider
            {
                public function boot()
                {
                    $this->registerPolicies();

                    // Implicitly grant "Super Admin" role all permissions
                    // This works in the app by using gate-related functions like auth()->user->can() and @can()
                    Gate::before(function ($user, $ability) {
                        return $user->hasRole('Super Admin') ? true : null;
                    });
                }
            }


            如果你希望管理员不能操作一些东西可以如下这样：
                Gate::after(function ($user, $ability) {
                   return $user->hasRole('Super Admin'); // note this returns boolean
                });

        如果需要覆盖默认的403错误可以使用：
            public function render($request, Exception $exception)
            {
                if ($exception instanceof \Zhulei\Permission\Exceptions\UnauthorizedException) {
                    // Code here ...
                }

                return parent::render($request, $exception);
            }


        数据填充：
            use Illuminate\Database\Seeder;
            use Spatie\Permission\Models\Role;
            use Spatie\Permission\Models\Permission;

            class RolesAndPermissionsSeeder extends Seeder
            {
                public function run()
                {
                    // Reset cached roles and permissions
                    app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

                    // create permissions
                    Permission::create(['name' => 'edit articles']);
                    Permission::create(['name' => 'delete articles']);
                    Permission::create(['name' => 'publish articles']);
                    Permission::create(['name' => 'unpublish articles']);

                    // create roles and assign created permissions

                    // this can be done as separate statements
                    $role = Role::create(['name' => 'writer']);
                    $role->givePermissionTo('edit articles');

                    // or may be done by chaining
                    $role = Role::create(['name' => 'moderator'])
                        ->givePermissionTo(['publish articles', 'unpublish articles']);

                    $role = Role::create(['name' => 'super-admin']);
                    $role->givePermissionTo(Permission::all());
                }
            }













